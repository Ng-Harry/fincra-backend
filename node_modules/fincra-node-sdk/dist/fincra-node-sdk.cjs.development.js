'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct.bind();
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/**
 * A custom error class for handling the library related errors.
 * @class BaseError
 */
var BaseError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(BaseError, _Error);

  /**
   * The BaseError Constructor.
   * @param {Record<any,any>} options - A configuration object for errors.
   * @param {String} options.message - The error message if any.
   * @constructor BaseError
   */
  function BaseError(options) {
    var _this;

    if (options === void 0) {
      options = {};
    }

    _this = _Error.call(this) || this;
    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    _this.name = _this.constructor.name;
    _this.message = options.message;
    return _this;
  }

  return BaseError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var BASE_URL = 'https://sandboxapi.fincra.com';
var BASE_URL_PROD = 'https://api.fincra.com';

/// utility function to exclude certain fields that should not be shown or sent to the client
var excludeFields = function excludeFields(fields, objects) {
  var exclude = new Set(fields);
  var result = Object.fromEntries(Object.entries(objects).filter(function (e) {
    return !exclude.has(e[0]);
  }));
  return result;
};

var handleErrors = function handleErrors(error) {
  return error.response.data;
};
var handleAxiosError = function handleAxiosError(error) {
  return error.message;
};

/**
 * If the public key starts with pk_prod, return the production URL, otherwise return the sandbox URL
 * @param {string} publicKey - Your public key.
 * @returns The base url for the public key
 */

var getUrl = function getUrl(env) {
  if (env === void 0) {
    env = {
      sandbox: false
    };
  }

  if (env.sandbox) {
    return BASE_URL;
  }

  return BASE_URL_PROD;
};

/**
 * @class Fincra REST api initializer
 */

var FincraCore = /*#__PURE__*/function () {
  /**
   * This is a constructor for creating a fincra core instance
   * @param { string } publicKey merchant public key
   * @param { string } secretKey merchant secret key
   * @param { IEnvironment } environment fincra environment
   * @returns { FincraCore } a fincra core instance
   */
  function FincraCore(publicKey, secretKey, environment) {
    this.publicKey = publicKey;
    this.secretKey = secretKey;
    this.environment = environment;
    this.publicKey = publicKey;
    this.secretKey = secretKey;
    this.environment = environment;
    this.request = axios.create({
      baseURL: getUrl(environment),
      headers: {
        'api-key': secretKey,
        Accept: 'application/json',
        'Content-Type': 'application/json'
      }
    });
  }
  /**
   * It returns an AxiosInstance object for making requests to fincra api
   * @returns An AxiosInstance
   */


  var _proto = FincraCore.prototype;

  _proto.getBaseUrl = function getBaseUrl() {
    try {
      return this.request;
    } catch (error) {
      throw new BaseError({
        message: handleErrors(error)
      });
    }
  };

  _proto.useGetRequest = /*#__PURE__*/function () {
    var _useGetRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req) {
      var customHeaders, _getUrl, requestInstance;

      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              customHeaders = excludeFields(['common', 'delete', 'get', 'head', 'put', 'patch', 'post'], this.request.defaults.headers);
              _getUrl = this.request.defaults.baseURL;
              _context.next = 5;
              return axios.request({
                url: "" + _getUrl + req.url,
                method: req.method,
                headers: customHeaders,
                data: req.data
              });

            case 5:
              requestInstance = _context.sent;
              return _context.abrupt("return", requestInstance);

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleAxiosError(_context.t0)
              });

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 9]]);
    }));

    function useGetRequest(_x) {
      return _useGetRequest.apply(this, arguments);
    }

    return useGetRequest;
  }();

  return FincraCore;
}();

/**
 * The Business module for handling the business related operations.
 * @class Business
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 */

var Business = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(Business, _FincraCore);

  function Business(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  }
  /**
   * This method gets the business id of the merchant.
   * @returns The business id and other information of the merchant
   */


  var _proto = Business.prototype;

  _proto.getBusinessId =
  /*#__PURE__*/
  function () {
    var _getBusinessId = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              request = this.getBaseUrl();
              _context.next = 4;
              return request.get("/profile/merchants/me");

            case 4:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleErrors(_context.t0)
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 8]]);
    }));

    function getBusinessId() {
      return _getBusinessId.apply(this, arguments);
    }

    return getBusinessId;
  }();

  return Business;
}(FincraCore);

/**
 * The chargeback module for handling the chargeback related operations.
 * @class Chargebacks
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 */

var ChargeBacks = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(ChargeBacks, _FincraCore);

  function ChargeBacks(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  }
  /**
   * It lists all chargebacks for a business
   * @param {string} id - The id of the business you want to get the chargebacks for.
   * @returns The response.data is being returned.
   */


  var _proto = ChargeBacks.prototype;

  _proto.listChargeBacks =
  /*#__PURE__*/
  function () {
    var _listChargeBacks = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(id) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              request = this.getBaseUrl();
              _context.next = 4;
              return request.get("/collections/chargebacks?business=" + id);

            case 4:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleErrors(_context.t0)
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 8]]);
    }));

    function listChargeBacks(_x) {
      return _listChargeBacks.apply(this, arguments);
    }

    return listChargeBacks;
  }()
  /**
   * This function accepts a chargeback
   * @param {AcceptChargeBackDto} data - AcceptChargeBackDto
   * @returns The response is the chargeback object with the status changed to accepted.
   */
  ;

  _proto.acceptChargeBack =
  /*#__PURE__*/
  function () {
    var _acceptChargeBack = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              request = this.getBaseUrl();
              _context2.next = 4;
              return request.patch("/collections/chargebacks/" + data.chargeBackId + "/accept?business=" + data.businessId);

            case 4:
              response = _context2.sent;
              return _context2.abrupt("return", response.data);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              throw new BaseError({
                message: handleErrors(_context2.t0)
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 8]]);
    }));

    function acceptChargeBack(_x2) {
      return _acceptChargeBack.apply(this, arguments);
    }

    return acceptChargeBack;
  }()
  /**
   * This function rejects a chargeback
   * @param {RejectChargeBackDto} data - {
   * @returns The response is a JSON object with the following properties:
   */
  ;

  _proto.rejectChargeBack =
  /*#__PURE__*/
  function () {
    var _rejectChargeBack = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              request = this.getBaseUrl();
              _context3.next = 4;
              return request.patch("/collections/chargebacks/" + data.chargeBackId + "/reject?business=" + data.businessId, {
                business_reject_reason: data.reason
              });

            case 4:
              response = _context3.sent;
              return _context3.abrupt("return", response.data);

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](0);
              throw new BaseError({
                message: handleErrors(_context3.t0)
              });

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 8]]);
    }));

    function rejectChargeBack(_x3) {
      return _rejectChargeBack.apply(this, arguments);
    }

    return rejectChargeBack;
  }();

  return ChargeBacks;
}(FincraCore);

/**
 * The conversion module for handling the conversion related operations.
 * @class Conversion
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 */

var Conversion = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(Conversion, _FincraCore);

  function Conversion(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  }
  /**
   * This function gets all the conversions for a business
   * @param {string} id - The id of the business you want to get the conversions for.
   * @returns An array of conversions objects
   */


  var _proto = Conversion.prototype;

  _proto.getBusinessConversions =
  /*#__PURE__*/
  function () {
    var _getBusinessConversions = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(id) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              request = this.getBaseUrl();
              _context.next = 4;
              return request.get("/conversions?business=" + id);

            case 4:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleErrors(_context.t0)
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 8]]);
    }));

    function getBusinessConversions(_x) {
      return _getBusinessConversions.apply(this, arguments);
    }

    return getBusinessConversions;
  }()
  /**
   * It fetches a conversion by id.
   * @param {string} conversionId - FetchConversionDto
   * @returns The conversion object
   */
  ;

  _proto.fetchConversion =
  /*#__PURE__*/
  function () {
    var _fetchConversion = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(conversionId) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              request = this.getBaseUrl();
              _context2.next = 4;
              return request.get("/conversions/reference/" + conversionId);

            case 4:
              response = _context2.sent;
              return _context2.abrupt("return", response.data);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              throw new BaseError({
                message: handleErrors(_context2.t0)
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 8]]);
    }));

    function fetchConversion(_x2) {
      return _fetchConversion.apply(this, arguments);
    }

    return fetchConversion;
  }()
  /**
   * It creates a conversion for a business.
   * @param {CreateConversionDto} conversion - CreateConversionDto
   * @returns The response from the API which contains the conversion object
   */
  ;

  _proto.createConversion =
  /*#__PURE__*/
  function () {
    var _createConversion = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(conversion) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              request = this.getBaseUrl();
              _context3.next = 4;
              return request.post('/conversions/initiate', conversion);

            case 4:
              response = _context3.sent;
              return _context3.abrupt("return", response.data);

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](0);
              throw new BaseError({
                message: handleErrors(_context3.t0)
              });

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 8]]);
    }));

    function createConversion(_x3) {
      return _createConversion.apply(this, arguments);
    }

    return createConversion;
  }();

  return Conversion;
}(FincraCore);

/**
 * The quote module for handling the quote related operations.
 * @class Quote
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 *
 */

var Quote = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(Quote, _FincraCore);

  function Quote(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  }
  /**
   * It takes in a CreateQuoteDto object, makes a post request to the quotes endpoint, and returns the
   * response data
   * @param {CreateQuoteDto} data - The data to be sent to the server.
   * @returns The response from the API; a quote object
   */


  var _proto = Quote.prototype;

  _proto.createQuote =
  /*#__PURE__*/
  function () {
    var _createQuote = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              request = this.getBaseUrl();
              _context.next = 4;
              return request.post("/quotes/generate", data);

            case 4:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleErrors(_context.t0)
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 8]]);
    }));

    function createQuote(_x) {
      return _createQuote.apply(this, arguments);
    }

    return createQuote;
  }();

  return Quote;
}(FincraCore);

/**
 * The wallet module for handling the wallet related operations.
 * @class Wallet
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 */

var Wallet = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(Wallet, _FincraCore);

  function Wallet(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  } // TODO done

  /**
   * It lists all the logs and activities of wallets performed by a business
   * @param {WalletLogsDto} data - WalletLogsDto - the data to be sent to the API
   * @returns an array of wallet objects.
   */


  var _proto = Wallet.prototype;

  _proto.listWalletLogs =
  /*#__PURE__*/
  function () {
    var _listWalletLogs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
      var reqObj, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              reqObj = {
                method: 'GET',
                url: "/wallets/logs",
                data: data
              };
              _context.next = 4;
              return this.useGetRequest(reqObj);

            case 4:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleAxiosError(_context.t0)
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 8]]);
    }));

    function listWalletLogs(_x) {
      return _listWalletLogs.apply(this, arguments);
    }

    return listWalletLogs;
  }()
  /**
   * It lists all the wallets of a business.
   * @param {string} id - The id of the business
   * @returns an array of wallet objects.
   */
  ;

  _proto.listWallet =
  /*#__PURE__*/
  function () {
    var _listWallet = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              request = this.getBaseUrl();
              _context2.next = 4;
              return request.get("/wallets/?businessID=" + id);

            case 4:
              response = _context2.sent;
              return _context2.abrupt("return", response.data);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              throw new BaseError({
                message: handleErrors(_context2.t0)
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 8]]);
    }));

    function listWallet(_x2) {
      return _listWallet.apply(this, arguments);
    }

    return listWallet;
  }()
  /**
   * It gets a wallet by id.
   * @param {string} id - The id of the wallet you want to retrieve.
   * @returns The wallet object
   */
  ;

  _proto.getWallet =
  /*#__PURE__*/
  function () {
    var _getWallet = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              request = this.getBaseUrl();
              _context3.next = 4;
              return request.get("/wallets/" + id);

            case 4:
              response = _context3.sent;
              return _context3.abrupt("return", response.data);

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](0);
              throw new BaseError({
                message: handleErrors(_context3.t0)
              });

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 8]]);
    }));

    function getWallet(_x3) {
      return _getWallet.apply(this, arguments);
    }

    return getWallet;
  }();

  return Wallet;
}(FincraCore);

/**
 * The verify module for handling the verification and kyc related operations.
 * @class VerifyBankAccount
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 *
 */

var VerifyCreds = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(VerifyCreds, _FincraCore);

  function VerifyCreds(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  }
  /**
   * It verifies a bank account
   * @param {VerifyBankAccountDto} data - The data object that will be sent to the API.
   * @returns The bank account object.
   */


  var _proto = VerifyCreds.prototype;

  _proto.verifyBankAccount =
  /*#__PURE__*/
  function () {
    var _verifyBankAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              request = this.getBaseUrl();
              _context.next = 4;
              return request.post("/core/accounts/resolve", data);

            case 4:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleErrors(_context.t0)
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 8]]);
    }));

    function verifyBankAccount(_x) {
      return _verifyBankAccount.apply(this, arguments);
    }

    return verifyBankAccount;
  }()
  /**
   * It verifies a successful transaction
   * @param reference - The reference of the payout you want to fetch.
   * @returns The transaction object.
   */
  ;

  _proto.verifyPayment =
  /*#__PURE__*/
  function () {
    var _verifyPayment = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(reference) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              request = this.getBaseUrl();
              _context2.next = 4;
              return request.get("/checkout/payments/merchant-reference/" + reference);

            case 4:
              response = _context2.sent;
              return _context2.abrupt("return", response.data);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              throw new BaseError({
                message: handleErrors(_context2.t0)
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 8]]);
    }));

    function verifyPayment(_x2) {
      return _verifyPayment.apply(this, arguments);
    }

    return verifyPayment;
  }()
  /**
   * This methods helps resolves and validates a bvn
   * @param {BvnResolutionDto} data - The data object that will be sent to the API.
   * @returns The user details linked to the bvn
   */
  ;

  _proto.resolveBvn =
  /*#__PURE__*/
  function () {
    var _resolveBvn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              request = this.getBaseUrl();
              _context3.next = 4;
              return request.post("/core/bvn-verification", data);

            case 4:
              response = _context3.sent;
              return _context3.abrupt("return", response.data);

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](0);
              throw new BaseError({
                message: handleErrors(_context3.t0)
              });

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 8]]);
    }));

    function resolveBvn(_x3) {
      return _resolveBvn.apply(this, arguments);
    }

    return resolveBvn;
  }();

  return VerifyCreds;
}(FincraCore);

/**
 * The Beneficiary module for handling the beneficary related operations.
 * @class Beneficiary
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 */

var Beneficiary = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(Beneficiary, _FincraCore);

  function Beneficiary(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  }
  /**
   * allows a business/merchant to create a beneficiary
   * @param {CreateBeneficiaryDto} data - CreateBeneficiaryDto - This is the data that will be sent to the API.
   * @returns The response from the API
   */


  var _proto = Beneficiary.prototype;

  _proto.createBeneficiary =
  /*#__PURE__*/
  function () {
    var _createBeneficiary = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
      var request, dataBody, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              request = this.getBaseUrl();
              dataBody = excludeFields(['businessId'], data);
              _context.next = 5;
              return request.post("/profile/beneficiaries/business/" + data.businessId, dataBody);

            case 5:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleErrors(_context.t0)
              });

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 9]]);
    }));

    function createBeneficiary(_x) {
      return _createBeneficiary.apply(this, arguments);
    }

    return createBeneficiary;
  }() // TODO done

  /**
   * returns all the beneficiaries linked to business/merchant
   * @param {ListBeneficiaryDto} data - ListBeneficiaryDto - This is the data that will be sent to the API.
   * @returns The response is an array of beneficiary objects
   */
  ;

  _proto.listBeneficiaries =
  /*#__PURE__*/
  function () {
    var _listBeneficiaries = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data) {
      var dataBody, requestObj, response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              dataBody = excludeFields(['businessId'], data);
              requestObj = {
                method: 'GET',
                url: "/profile/beneficiaries/business/" + data.businessId,
                data: dataBody
              };
              _context2.next = 5;
              return this.useGetRequest(requestObj);

            case 5:
              response = _context2.sent;
              return _context2.abrupt("return", response.data);

            case 9:
              _context2.prev = 9;
              _context2.t0 = _context2["catch"](0);
              throw new BaseError({
                message: handleAxiosError(_context2.t0)
              });

            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 9]]);
    }));

    function listBeneficiaries(_x2) {
      return _listBeneficiaries.apply(this, arguments);
    }

    return listBeneficiaries;
  }()
  /**
   * It fetches and returns the detail of a single beneficiary
   * @param {FetchDeleteBeneficiaryDto} data - FetchDeleteBeneficiaryDto - the data to be sent to the API
   * @returns The response is a beneficiary object.
   */
  ;

  _proto.fetchBeneficiary =
  /*#__PURE__*/
  function () {
    var _fetchBeneficiary = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              request = this.getBaseUrl();
              _context3.next = 4;
              return request.get("/profile/beneficiaries/business/" + data.businessId + "/" + data.beneficiaryId);

            case 4:
              response = _context3.sent;
              return _context3.abrupt("return", response.data);

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](0);
              throw new BaseError({
                message: handleErrors(_context3.t0)
              });

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 8]]);
    }));

    function fetchBeneficiary(_x3) {
      return _fetchBeneficiary.apply(this, arguments);
    }

    return fetchBeneficiary;
  }()
  /**
   * allows a merchant to update any of this beneficiary details
   * @param {UpdateBeneficiaryDto} data - UpdateBeneficiaryDto - The data object that will be sent to the API.
   * @returns The response from the API
   */
  ;

  _proto.updateBeneficiary =
  /*#__PURE__*/
  function () {
    var _updateBeneficiary = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {
      var request, dataBody, response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              request = this.getBaseUrl();
              dataBody = excludeFields(['businessId', 'beneficiaryId'], data);
              _context4.next = 5;
              return request.patch("/profile/beneficiaries/business/" + data.businessId + "/" + data.beneficiaryId, dataBody);

            case 5:
              response = _context4.sent;
              return _context4.abrupt("return", response.data);

            case 9:
              _context4.prev = 9;
              _context4.t0 = _context4["catch"](0);
              throw new BaseError({
                message: handleErrors(_context4.t0)
              });

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 9]]);
    }));

    function updateBeneficiary(_x4) {
      return _updateBeneficiary.apply(this, arguments);
    }

    return updateBeneficiary;
  }()
  /**
   * It allows a merchant to remove any of his beneficiary
   * @param {FetchDeleteBeneficiaryDto} data - FetchDeleteBeneficiaryDto - The data object that will be sent to the API.
   * @returns The response from the API
   */
  ;

  _proto.deleteBeneficiary =
  /*#__PURE__*/
  function () {
    var _deleteBeneficiary = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              request = this.getBaseUrl();
              _context5.next = 4;
              return request["delete"]("/profile/beneficiaries/business/" + data.businessId + "/" + data.beneficiaryId);

            case 4:
              response = _context5.sent;
              return _context5.abrupt("return", response.data);

            case 8:
              _context5.prev = 8;
              _context5.t0 = _context5["catch"](0);
              throw new BaseError({
                message: handleErrors(_context5.t0)
              });

            case 11:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 8]]);
    }));

    function deleteBeneficiary(_x5) {
      return _deleteBeneficiary.apply(this, arguments);
    }

    return deleteBeneficiary;
  }();

  return Beneficiary;
}(FincraCore);

/**
 * The Payout module for handling the payout related operations.
 * @class Payout
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 */

var Payout = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(Payout, _FincraCore);

  function Payout(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  }
  /**
   * It allows a merchant to make a payout
   * @param {CreatePayoutDto} data - CreatePayoutDto
   * @returns The response from the API, which is the transaction object.
   */


  var _proto = Payout.prototype;

  _proto.createPayout =
  /*#__PURE__*/
  function () {
    var _createPayout = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              request = this.getBaseUrl();
              _context.next = 4;
              return request.post("/disbursements/payouts", data);

            case 4:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleErrors(_context.t0)
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 8]]);
    }));

    function createPayout(_x) {
      return _createPayout.apply(this, arguments);
    }

    return createPayout;
  }()
  /**
   * It allows a merchant to make a transfer to another merchant's wallet.
   * @param {WalletToWalletTransferDto} data - WalletToWalletTransferDto
   * @returns The response from the API, which is the transaction object.
   */
  ;

  _proto.walletToWalletTransfer =
  /*#__PURE__*/
  function () {
    var _walletToWalletTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              request = this.getBaseUrl();
              _context2.next = 4;
              return request.post("/disbursements/payouts/wallets", data);

            case 4:
              response = _context2.sent;
              return _context2.abrupt("return", response.data);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              throw new BaseError({
                message: handleErrors(_context2.t0)
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 8]]);
    }));

    function walletToWalletTransfer(_x2) {
      return _walletToWalletTransfer.apply(this, arguments);
    }

    return walletToWalletTransfer;
  }()
  /**
   * It allows a merchant fetch a payout by it's transaction reference
   * @param {string} reference - The reference of the payout you want to fetch.
   * @returns The transaction object.
   */
  ;

  _proto.fetchPayout =
  /*#__PURE__*/
  function () {
    var _fetchPayout = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(reference) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              request = this.getBaseUrl();
              _context3.next = 4;
              return request.get("/disbursements/payouts/reference/" + reference);

            case 4:
              response = _context3.sent;
              return _context3.abrupt("return", response.data);

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](0);
              throw new BaseError({
                message: handleErrors(_context3.t0)
              });

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 8]]);
    }));

    function fetchPayout(_x3) {
      return _fetchPayout.apply(this, arguments);
    }

    return fetchPayout;
  }()
  /**
   * It allows a merchant to fetch a payout by customer reference
   * @param {string} creference - The customer reference of the payout you want to fetch.
   * @returns The response is an object with the following properties:
   */
  ;

  _proto.fetchCustomerPayout =
  /*#__PURE__*/
  function () {
    var _fetchCustomerPayout = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(creference) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              request = this.getBaseUrl();
              _context4.next = 4;
              return request.get("/disbursements/payouts/customer-reference/" + creference);

            case 4:
              response = _context4.sent;
              return _context4.abrupt("return", response.data);

            case 8:
              _context4.prev = 8;
              _context4.t0 = _context4["catch"](0);
              throw new BaseError({
                message: handleErrors(_context4.t0)
              });

            case 11:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 8]]);
    }));

    function fetchCustomerPayout(_x4) {
      return _fetchCustomerPayout.apply(this, arguments);
    }

    return fetchCustomerPayout;
  }()
  /**
   * This method retrieve a list of banks supported by fincra to process payments
   * @returns A list of banks
   */
  ;

  _proto.listBanks =
  /*#__PURE__*/
  function () {
    var _listBanks = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              request = this.getBaseUrl();
              _context5.next = 4;
              return request.get("/core/banks?currency=NGN&country=NG");

            case 4:
              response = _context5.sent;
              return _context5.abrupt("return", response.data);

            case 8:
              _context5.prev = 8;
              _context5.t0 = _context5["catch"](0);
              throw new BaseError({
                message: handleErrors(_context5.t0)
              });

            case 11:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 8]]);
    }));

    function listBanks() {
      return _listBanks.apply(this, arguments);
    }

    return listBanks;
  }()
  /**
   * this method allows a merchant to upload a payout document
   * @param {UploadPayoutDto} data - UploadPayoutDto
   * @returns The transaction object.
   */
  ;

  _proto.uploadTransactionDocument =
  /*#__PURE__*/
  function () {
    var _uploadTransactionDocument = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              request = this.getBaseUrl();
              _context6.next = 4;
              return request.post("/payouts/documents-upload ", data);

            case 4:
              response = _context6.sent;
              return _context6.abrupt("return", response.data);

            case 8:
              _context6.prev = 8;
              _context6.t0 = _context6["catch"](0);
              throw new BaseError({
                message: handleErrors(_context6.t0)
              });

            case 11:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[0, 8]]);
    }));

    function uploadTransactionDocument(_x5) {
      return _uploadTransactionDocument.apply(this, arguments);
    }

    return uploadTransactionDocument;
  }() // TODO: list payouts
  ;

  _proto.listPayouts =
  /*#__PURE__*/
  function () {
    var _listPayouts = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(data) {
      var requestObj, response;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.prev = 0;
              requestObj = {
                method: 'GET',
                url: '/disbursements/payouts',
                data: data
              };
              _context7.next = 4;
              return this.useGetRequest(requestObj);

            case 4:
              response = _context7.sent;
              return _context7.abrupt("return", response.data);

            case 8:
              _context7.prev = 8;
              _context7.t0 = _context7["catch"](0);
              throw new BaseError({
                message: handleAxiosError(_context7.t0)
              });

            case 11:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[0, 8]]);
    }));

    function listPayouts(_x6) {
      return _listPayouts.apply(this, arguments);
    }

    return listPayouts;
  }();

  return Payout;
}(FincraCore);

/**
 * The subaccount module for handling the subaccounts related operations.
 * @class Subaccount
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 */

var Subaccount = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(Subaccount, _FincraCore);

  function Subaccount(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  }
  /**
   * It creates a sub account for a business
   * @param {CreateSubAccountDto} data - CreateSubAccountDto
   * @returns The response from the API call, containing the sub account details
   */


  var _proto = Subaccount.prototype;

  _proto.createSubAccount =
  /*#__PURE__*/
  function () {
    var _createSubAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
      var request, dataBody, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              request = this.getBaseUrl();
              dataBody = excludeFields(['businessId'], data);
              _context.next = 5;
              return request.post("/profile/business/" + data.businessId + "/sub-accounts", dataBody);

            case 5:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleErrors(_context.t0)
              });

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 9]]);
    }));

    function createSubAccount(_x) {
      return _createSubAccount.apply(this, arguments);
    }

    return createSubAccount;
  }()
  /**
   * It lists all the sub accounts of a business account.
   * @param {string} id - The id of the business account
   * @returns A list of sub accounts
   */
  ;

  _proto.listSubAccounts =
  /*#__PURE__*/
  function () {
    var _listSubAccounts = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              request = this.getBaseUrl();
              _context2.next = 4;
              return request.get("/profile/business/" + id + "/sub-accounts");

            case 4:
              response = _context2.sent;
              return _context2.abrupt("return", response.data);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              throw new BaseError({
                message: handleErrors(_context2.t0)
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 8]]);
    }));

    function listSubAccounts(_x2) {
      return _listSubAccounts.apply(this, arguments);
    }

    return listSubAccounts;
  }()
  /**
   * It fetches a sub account from the API
   * @param {FetchSubAccountDto} data - FetchSubAccountDto
   * @returns The response data which contains the sub account details
   */
  ;

  _proto.fetchSubAccount =
  /*#__PURE__*/
  function () {
    var _fetchSubAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              request = this.getBaseUrl();
              _context3.next = 4;
              return request.get("/profile/business/" + data.businessId + "/sub-accounts/" + data.subAccountId);

            case 4:
              response = _context3.sent;
              return _context3.abrupt("return", response.data);

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](0);
              throw new BaseError({
                message: handleErrors(_context3.t0)
              });

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 8]]);
    }));

    function fetchSubAccount(_x3) {
      return _fetchSubAccount.apply(this, arguments);
    }

    return fetchSubAccount;
  }()
  /**
   * It updates a sub account
   * @param {UpdateSubAccountDto} data - UpdateSubAccountDto
   * @returns The response data, containing the updated sub account details
   */
  ;

  _proto.updateSubAccount =
  /*#__PURE__*/
  function () {
    var _updateSubAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {
      var request, dataBody, response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              request = this.getBaseUrl();
              dataBody = excludeFields(['business', 'subAccountId'], data);
              _context4.next = 5;
              return request.patch("/profile/business/" + data.business + "/sub-accounts/" + data.subAccountId, dataBody);

            case 5:
              response = _context4.sent;
              return _context4.abrupt("return", response.data);

            case 9:
              _context4.prev = 9;
              _context4.t0 = _context4["catch"](0);
              throw new BaseError({
                message: handleErrors(_context4.t0)
              });

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 9]]);
    }));

    function updateSubAccount(_x4) {
      return _updateSubAccount.apply(this, arguments);
    }

    return updateSubAccount;
  }();

  return Subaccount;
}(FincraCore);

/**
 * The Collection module for handling the collection related operations.
 * @class Collection
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 **/

var Collection = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(Collection, _FincraCore);

  function Collection(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  }
  /**
   * this method creates a temporary virtual account that can be used to receive funds over a time period
   * @param {PayWithTransferDto} data - the data to be sent to the server
   * @returns a virtual account object
   */


  var _proto = Collection.prototype;

  _proto.payWithTransfer =
  /*#__PURE__*/
  function () {
    var _payWithTransfer = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              request = this.getBaseUrl();
              _context.next = 4;
              return request.post("/profile/virtual-accounts/transfer", data);

            case 4:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleErrors(_context.t0)
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 8]]);
    }));

    function payWithTransfer(_x) {
      return _payWithTransfer.apply(this, arguments);
    }

    return payWithTransfer;
  }()
  /**
   * this methods returns a single or multiple collection of a main virtual account
   * @param {ListCollectionMainVirtualAccountDto} data - the data to be sent to the server
   * @returns an array of collection objects
   */
  ;

  _proto.listCollectionMain =
  /*#__PURE__*/
  function () {
    var _listCollectionMain = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              request = this.getBaseUrl();
              _context2.next = 4;
              return request.get("/wallets/topups?business=" + data.business + "&reference=" + data.reference + "&page=" + data.page + "&perPage=" + data.perPage);

            case 4:
              response = _context2.sent;
              return _context2.abrupt("return", response.data);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](0);
              throw new BaseError({
                message: handleErrors(_context2.t0)
              });

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 8]]);
    }));

    function listCollectionMain(_x2) {
      return _listCollectionMain.apply(this, arguments);
    }

    return listCollectionMain;
  }()
  /**
   * this method returns a single collection of an additional virtual account by its reference
   * @param {FetchCollectionVirtualAccountDto} data - the data to be sent to the server
   * @returns a collection object
   */
  ;

  _proto.fetchCollectionAddition =
  /*#__PURE__*/
  function () {
    var _fetchCollectionAddition = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              request = this.getBaseUrl();
              _context3.next = 4;
              return request.get("/collections/reference/" + data.reference + "?business=" + data.business);

            case 4:
              response = _context3.sent;
              return _context3.abrupt("return", response.data);

            case 8:
              _context3.prev = 8;
              _context3.t0 = _context3["catch"](0);
              throw new BaseError({
                message: handleErrors(_context3.t0)
              });

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 8]]);
    }));

    function fetchCollectionAddition(_x3) {
      return _fetchCollectionAddition.apply(this, arguments);
    }

    return fetchCollectionAddition;
  }() // TODO: List collections for additional virtual accounts done

  /**
   * this methods returns a single or multiple collection of a additiona virtual accounts of a business
   * @param {ListCollectionMultipleVirtualAccountsDto} data - the data to be sent to the server
   * @returns an array of collection objects
   */
  ;

  _proto.listCollectionAdditional =
  /*#__PURE__*/
  function () {
    var _listCollectionAdditional = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {
      var requestObj, response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              requestObj = {
                method: 'GET',
                url: '/collections',
                data: data
              };
              _context4.next = 4;
              return this.useGetRequest(requestObj);

            case 4:
              response = _context4.sent;
              return _context4.abrupt("return", response.data);

            case 8:
              _context4.prev = 8;
              _context4.t0 = _context4["catch"](0);
              throw new BaseError({
                message: handleAxiosError(_context4.t0)
              });

            case 11:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 8]]);
    }));

    function listCollectionAdditional(_x4) {
      return _listCollectionAdditional.apply(this, arguments);
    }

    return listCollectionAdditional;
  }();

  return Collection;
}(FincraCore);

/**
 * The virtual account module for handling the virtual account related operations.
 * @class VirtualAccount
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 **/

var VirtualAccount = /*#__PURE__*/function (_FincraCore) {
  _inheritsLoose(VirtualAccount, _FincraCore);

  function VirtualAccount(publicKey, secretKey, environment) {
    return _FincraCore.call(this, publicKey, secretKey, environment) || this;
  }
  /**
   * this method creates a virtual account
   * @param { CreateVirtualAccountDto} data - the data to be sent to the server
   * @returns a virtual account object
   */


  var _proto = VirtualAccount.prototype;

  _proto.createVirtualAccount =
  /*#__PURE__*/
  function () {
    var _createVirtualAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              request = this.getBaseUrl();
              _context.next = 4;
              return request.post('/profile/virtual-accounts/requests', data);

            case 4:
              response = _context.sent;
              return _context.abrupt("return", response.data);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              throw new BaseError({
                message: handleErrors(_context.t0)
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 8]]);
    }));

    function createVirtualAccount(_x) {
      return _createVirtualAccount.apply(this, arguments);
    }

    return createVirtualAccount;
  }()
  /**
   * this method creates an individual sub virtual account
   * @param {CreateIndividualSubAccountDto} data - the data to be sent to the server
   * @returns a virtual account object
   */
  ;

  _proto.createIndividualSubVirtualAccount =
  /*#__PURE__*/
  function () {
    var _createIndividualSubVirtualAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data) {
      var request, dataBody, response;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              request = this.getBaseUrl();
              dataBody = excludeFields(['businessId', 'subAccountId'], data);
              _context2.next = 5;
              return request.post("/profile/virtual-accounts/business/" + data.businessId + "/sub-accounts/" + data.subAccountId + "/requests", dataBody);

            case 5:
              response = _context2.sent;
              return _context2.abrupt("return", response.data);

            case 9:
              _context2.prev = 9;
              _context2.t0 = _context2["catch"](0);
              throw new BaseError({
                message: handleErrors(_context2.t0)
              });

            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 9]]);
    }));

    function createIndividualSubVirtualAccount(_x2) {
      return _createIndividualSubVirtualAccount.apply(this, arguments);
    }

    return createIndividualSubVirtualAccount;
  }()
  /**
   * this method creates an instant approval virtual account
   * @param {CreateInstantApprovalVirtualAccountDto} data - the data to be sent to the server
   * @returns a virtual account object
   */
  ;

  _proto.createInstantApprovalVirtualAccount =
  /*#__PURE__*/
  function () {
    var _createInstantApprovalVirtualAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data) {
      var request, dataBody, response;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              request = this.getBaseUrl();
              dataBody = excludeFields(['businessId', 'subAccountId'], data);
              _context3.next = 5;
              return request.post("/profile/virtual-accounts/business/" + data.businessId + "/sub-accounts/" + data.subAccountId + "/requests/auto", dataBody);

            case 5:
              response = _context3.sent;
              return _context3.abrupt("return", response.data);

            case 9:
              _context3.prev = 9;
              _context3.t0 = _context3["catch"](0);
              throw new BaseError({
                message: handleErrors(_context3.t0)
              });

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[0, 9]]);
    }));

    function createInstantApprovalVirtualAccount(_x3) {
      return _createInstantApprovalVirtualAccount.apply(this, arguments);
    }

    return createInstantApprovalVirtualAccount;
  }()
  /**
   * this method creates a corporate virtual account
   * @param {CreateCorporateVirtualAccountDto} data - the data to be sent to the server
   * @returns a virtual account object
   */
  ;

  _proto.createCorporateSubVirtualAccount =
  /*#__PURE__*/
  function () {
    var _createCorporateSubVirtualAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(data) {
      var request, dataBody, response;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              request = this.getBaseUrl();
              dataBody = excludeFields(['businessId', 'subAccountId'], data);
              _context4.next = 5;
              return request.post("/profile/virtual-accounts/business/" + data.businessId + "/sub-accounts/" + data.subAccountId + "/requests", dataBody);

            case 5:
              response = _context4.sent;
              return _context4.abrupt("return", response.data);

            case 9:
              _context4.prev = 9;
              _context4.t0 = _context4["catch"](0);
              throw new BaseError({
                message: handleErrors(_context4.t0)
              });

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[0, 9]]);
    }));

    function createCorporateSubVirtualAccount(_x4) {
      return _createCorporateSubVirtualAccount.apply(this, arguments);
    }

    return createCorporateSubVirtualAccount;
  }()
  /**
   * this method lists all the requests for a virtual account made by the merchant
   * @returns a list of virtual account requests
   */
  ;

  _proto.listVirtualAccountRequests =
  /*#__PURE__*/
  function () {
    var _listVirtualAccountRequests = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.prev = 0;
              request = this.getBaseUrl();
              _context5.next = 4;
              return request.get('/profile/virtual-accounts/requests');

            case 4:
              response = _context5.sent;
              return _context5.abrupt("return", response.data);

            case 8:
              _context5.prev = 8;
              _context5.t0 = _context5["catch"](0);
              throw new BaseError({
                message: handleErrors(_context5.t0)
              });

            case 11:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[0, 8]]);
    }));

    function listVirtualAccountRequests() {
      return _listVirtualAccountRequests.apply(this, arguments);
    }

    return listVirtualAccountRequests;
  }()
  /**
   * this method fetches a virtual account by its currency
   * @param {string} currency - the currency of the virtual account
   * @returns a virtual account object
   */
  ;

  _proto.fetchVirtualAccountByCurrency =
  /*#__PURE__*/
  function () {
    var _fetchVirtualAccountByCurrency = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(currency) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              request = this.getBaseUrl();
              _context6.next = 4;
              return request.get("/profile/virtual-accounts?currency=" + currency);

            case 4:
              response = _context6.sent;
              return _context6.abrupt("return", response.data);

            case 8:
              _context6.prev = 8;
              _context6.t0 = _context6["catch"](0);
              throw new BaseError({
                message: handleErrors(_context6.t0)
              });

            case 11:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[0, 8]]);
    }));

    function fetchVirtualAccountByCurrency(_x5) {
      return _fetchVirtualAccountByCurrency.apply(this, arguments);
    }

    return fetchVirtualAccountByCurrency;
  }()
  /**
   * this method lists all the virtual accounts for a sub account
   * @param {ListSubVirtualAccountsDto} data - the data to be sent to the server
   * @returns a list of virtual account objects
   */
  ;

  _proto.listSubVirtualAccounts =
  /*#__PURE__*/
  function () {
    var _listSubVirtualAccounts = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(data) {
      var dataBody, requestObj, response;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.prev = 0;
              dataBody = excludeFields(['businessId', 'subAccountId'], data);
              requestObj = {
                method: 'GET',
                url: "/profile/virtual-accounts/business/" + data.businessId + "/sub-accounts/" + data.subAccountId,
                data: dataBody
              };
              _context7.next = 5;
              return this.useGetRequest(requestObj);

            case 5:
              response = _context7.sent;
              return _context7.abrupt("return", response.data);

            case 9:
              _context7.prev = 9;
              _context7.t0 = _context7["catch"](0);
              throw new BaseError({
                message: handleAxiosError(_context7.t0)
              });

            case 12:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[0, 9]]);
    }));

    function listSubVirtualAccounts(_x6) {
      return _listSubVirtualAccounts.apply(this, arguments);
    }

    return listSubVirtualAccounts;
  }()
  /**
   * this method fetches a single virtual account by its id
   * @param {string} virtualAccountId - the id of the virtual account
   * @returns a virtual account object
   */
  ;

  _proto.fetchSingleVirtualAccount =
  /*#__PURE__*/
  function () {
    var _fetchSingleVirtualAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(virtualAccountId) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.prev = 0;
              request = this.getBaseUrl();
              _context8.next = 4;
              return request.get("/profile/virtual-accounts/" + virtualAccountId);

            case 4:
              response = _context8.sent;
              return _context8.abrupt("return", response.data);

            case 8:
              _context8.prev = 8;
              _context8.t0 = _context8["catch"](0);
              throw new BaseError({
                message: handleErrors(_context8.t0)
              });

            case 11:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this, [[0, 8]]);
    }));

    function fetchSingleVirtualAccount(_x7) {
      return _fetchSingleVirtualAccount.apply(this, arguments);
    }

    return fetchSingleVirtualAccount;
  }() //TODO: List merchant virtual accounts done

  /**
   * this method lists all the virtual accounts for a merchant
   * @param {ListMerchantVirtualAccountsDto} data - the data to be sent to the server
   * @returns a list of virtual account objects
   */
  ;

  _proto.listMerchantVirtual =
  /*#__PURE__*/
  function () {
    var _listMerchantVirtual = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(data) {
      var requestObj, response;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.prev = 0;
              requestObj = {
                method: 'GET',
                url: "/profile/virtual-accounts",
                data: data
              };
              _context9.next = 4;
              return this.useGetRequest(requestObj);

            case 4:
              response = _context9.sent;
              return _context9.abrupt("return", response.data);

            case 8:
              _context9.prev = 8;
              _context9.t0 = _context9["catch"](0);
              throw new BaseError({
                message: handleAxiosError(_context9.t0)
              });

            case 11:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[0, 8]]);
    }));

    function listMerchantVirtual(_x8) {
      return _listMerchantVirtual.apply(this, arguments);
    }

    return listMerchantVirtual;
  }()
  /**
   * this method de-activates a Naira(NGN) virtual account
   * @param {string} id - the virtual account id
   * @returns a response object
   */
  ;

  _proto.deactivateVirtualAccount =
  /*#__PURE__*/
  function () {
    var _deactivateVirtualAccount = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(virtualAccountId) {
      var request, response;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.prev = 0;
              request = this.getBaseUrl();
              _context10.next = 4;
              return request.patch("/profile/virtual-accounts/inactive", {
                id: virtualAccountId
              });

            case 4:
              response = _context10.sent;
              return _context10.abrupt("return", response.data);

            case 8:
              _context10.prev = 8;
              _context10.t0 = _context10["catch"](0);
              throw new BaseError({
                message: handleErrors(_context10.t0)
              });

            case 11:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this, [[0, 8]]);
    }));

    function deactivateVirtualAccount(_x9) {
      return _deactivateVirtualAccount.apply(this, arguments);
    }

    return deactivateVirtualAccount;
  }();

  return VirtualAccount;
}(FincraCore);

/**
 * The Fincra class is the main class that is used to access the other classes
 * @class Fincra
 * @param {string} publicKey - The public key of the merchant
 * @param {string} privateKey - The private key of the merchant
 * @param {IEnvironment} environment - The environment to use
 * @returns The Fincra class
 * @example
 * const fincra = new Fincra('pk_NjI3ZmVmYmU1YTY1ZWM5OWJhOWFmMGJlOjoxMjE2NzA=', 'hzjMvDeY0dmBrDPSxZH5exnmdNc0aUXy', {sandbox: true});
 **/

var Fincra = function Fincra(publicKey, secretKey, environment) {
  this.publicKey = publicKey;
  this.secretKey = secretKey;
  this.environment = environment;
  this.conversion = new Conversion(this.publicKey, this.secretKey, this.environment);
  this.beneficiary = new Beneficiary(this.publicKey, this.secretKey, this.environment);
  this.business = new Business(this.publicKey, this.secretKey, this.environment);
  this.chargebacks = new ChargeBacks(this.publicKey, this.secretKey, this.environment);
  this.quote = new Quote(this.publicKey, this.secretKey, this.environment);
  this.verify = new VerifyCreds(this.publicKey, this.secretKey, this.environment);
  this.wallet = new Wallet(this.publicKey, this.secretKey, this.environment);
  this.payouts = new Payout(this.publicKey, this.secretKey, this.environment);
  this.subacct = new Subaccount(this.publicKey, this.secretKey, this.environment);
  this.collection = new Collection(this.publicKey, this.secretKey, this.environment);
  this.virtualAccount = new VirtualAccount(this.publicKey, this.secretKey, this.environment);
  this.publicKey = publicKey;
  this.secretKey = secretKey;
  this.environment = environment;
};

exports.Fincra = Fincra;
//# sourceMappingURL=fincra-node-sdk.cjs.development.js.map
