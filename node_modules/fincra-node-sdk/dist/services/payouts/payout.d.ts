import { FincraCore } from '../../api';
import { IEnvironment } from '../../utils';
import { CreatePayoutDto, ListPayoutDto, WalletToWalletTransferDto, UploadPayoutDto } from './dto';
/**
 * The Payout module for handling the payout related operations.
 * @class Payout
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 */
export declare class Payout extends FincraCore {
    constructor(publicKey: string, secretKey: string, environment?: IEnvironment);
    /**
     * It allows a merchant to make a payout
     * @param {CreatePayoutDto} data - CreatePayoutDto
     * @returns The response from the API, which is the transaction object.
     */
    createPayout(data: CreatePayoutDto): Promise<any>;
    /**
     * It allows a merchant to make a transfer to another merchant's wallet.
     * @param {WalletToWalletTransferDto} data - WalletToWalletTransferDto
     * @returns The response from the API, which is the transaction object.
     */
    walletToWalletTransfer(data: WalletToWalletTransferDto): Promise<any>;
    /**
     * It allows a merchant fetch a payout by it's transaction reference
     * @param {string} reference - The reference of the payout you want to fetch.
     * @returns The transaction object.
     */
    fetchPayout(reference: string): Promise<any>;
    /**
     * It allows a merchant to fetch a payout by customer reference
     * @param {string} creference - The customer reference of the payout you want to fetch.
     * @returns The response is an object with the following properties:
     */
    fetchCustomerPayout(creference: string): Promise<any>;
    /**
     * This method retrieve a list of banks supported by fincra to process payments
     * @returns A list of banks
     */
    listBanks(): Promise<any>;
    /**
     * this method allows a merchant to upload a payout document
     * @param {UploadPayoutDto} data - UploadPayoutDto
     * @returns The transaction object.
     */
    uploadTransactionDocument(data: UploadPayoutDto): Promise<any>;
    listPayouts(data: ListPayoutDto): Promise<any>;
}
