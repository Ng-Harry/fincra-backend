import { FincraCore } from '../../api';
import { IEnvironment } from '../../utils';
import { FetchCollectionVirtualAccountDto, ListCollectionMainVirtualAccountDto, ListCollectionMultipleVirtualAccountsDto, PayWithTransferDto } from './dto';
/**
 * The Collection module for handling the collection related operations.
 * @class Collection
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 **/
export declare class Collection extends FincraCore {
    constructor(publicKey: string, secretKey: string, environment?: IEnvironment);
    /**
     * this method creates a temporary virtual account that can be used to receive funds over a time period
     * @param {PayWithTransferDto} data - the data to be sent to the server
     * @returns a virtual account object
     */
    payWithTransfer(data: PayWithTransferDto): Promise<any>;
    /**
     * this methods returns a single or multiple collection of a main virtual account
     * @param {ListCollectionMainVirtualAccountDto} data - the data to be sent to the server
     * @returns an array of collection objects
     */
    listCollectionMain(data: ListCollectionMainVirtualAccountDto): Promise<any>;
    /**
     * this method returns a single collection of an additional virtual account by its reference
     * @param {FetchCollectionVirtualAccountDto} data - the data to be sent to the server
     * @returns a collection object
     */
    fetchCollectionAddition(data: FetchCollectionVirtualAccountDto): Promise<any>;
    /**
     * this methods returns a single or multiple collection of a additiona virtual accounts of a business
     * @param {ListCollectionMultipleVirtualAccountsDto} data - the data to be sent to the server
     * @returns an array of collection objects
     */
    listCollectionAdditional(data: ListCollectionMultipleVirtualAccountsDto): Promise<any>;
}
