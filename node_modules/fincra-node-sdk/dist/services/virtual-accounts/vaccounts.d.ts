import { FincraCore } from '../../api';
import { IEnvironment } from '../../utils';
import { CreateVirtualAccountDto, CreateIndividualSubAccountDto, CreateInstantApprovalVirtualAccountDto, CreateCorporateVirtualAccountDto, ListSubVirtualAccountsDto, ListMerchantVirtualAccountsDto } from './dto';
/**
 * The virtual account module for handling the virtual account related operations.
 * @class VirtualAccount
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 **/
export declare class VirtualAccount extends FincraCore {
    constructor(publicKey: string, secretKey: string, environment?: IEnvironment);
    /**
     * this method creates a virtual account
     * @param { CreateVirtualAccountDto} data - the data to be sent to the server
     * @returns a virtual account object
     */
    createVirtualAccount(data: CreateVirtualAccountDto): Promise<any>;
    /**
     * this method creates an individual sub virtual account
     * @param {CreateIndividualSubAccountDto} data - the data to be sent to the server
     * @returns a virtual account object
     */
    createIndividualSubVirtualAccount(data: CreateIndividualSubAccountDto): Promise<any>;
    /**
     * this method creates an instant approval virtual account
     * @param {CreateInstantApprovalVirtualAccountDto} data - the data to be sent to the server
     * @returns a virtual account object
     */
    createInstantApprovalVirtualAccount(data: CreateInstantApprovalVirtualAccountDto): Promise<any>;
    /**
     * this method creates a corporate virtual account
     * @param {CreateCorporateVirtualAccountDto} data - the data to be sent to the server
     * @returns a virtual account object
     */
    createCorporateSubVirtualAccount(data: CreateCorporateVirtualAccountDto): Promise<any>;
    /**
     * this method lists all the requests for a virtual account made by the merchant
     * @returns a list of virtual account requests
     */
    listVirtualAccountRequests(): Promise<any>;
    /**
     * this method fetches a virtual account by its currency
     * @param {string} currency - the currency of the virtual account
     * @returns a virtual account object
     */
    fetchVirtualAccountByCurrency(currency: string): Promise<any>;
    /**
     * this method lists all the virtual accounts for a sub account
     * @param {ListSubVirtualAccountsDto} data - the data to be sent to the server
     * @returns a list of virtual account objects
     */
    listSubVirtualAccounts(data: ListSubVirtualAccountsDto): Promise<any>;
    /**
     * this method fetches a single virtual account by its id
     * @param {string} virtualAccountId - the id of the virtual account
     * @returns a virtual account object
     */
    fetchSingleVirtualAccount(virtualAccountId: string): Promise<any>;
    /**
     * this method lists all the virtual accounts for a merchant
     * @param {ListMerchantVirtualAccountsDto} data - the data to be sent to the server
     * @returns a list of virtual account objects
     */
    listMerchantVirtual(data: ListMerchantVirtualAccountsDto): Promise<any>;
    /**
     * this method de-activates a Naira(NGN) virtual account
     * @param {string} id - the virtual account id
     * @returns a response object
     */
    deactivateVirtualAccount(virtualAccountId: string): Promise<any>;
}
