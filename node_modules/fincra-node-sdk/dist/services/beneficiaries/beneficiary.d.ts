import { FincraCore } from '../../api';
import { IEnvironment } from '../../utils';
import { CreateBeneficiaryDto, FetchDeleteBeneficiaryDto, UpdateBeneficiaryDto, ListBeneficiaryDto } from './dto';
/**
 * The Beneficiary module for handling the beneficary related operations.
 * @class Beneficiary
 * @extends FincraCore
 * @param {string} publicKey - The public key of the merchant
 * @param {string} secretKey - The secret key of the merchant
 * @param {IEnvironment} environment - The environment of the merchant
 */
export declare class Beneficiary extends FincraCore {
    constructor(publicKey: string, secretKey: string, environment?: IEnvironment);
    /**
     * allows a business/merchant to create a beneficiary
     * @param {CreateBeneficiaryDto} data - CreateBeneficiaryDto - This is the data that will be sent to the API.
     * @returns The response from the API
     */
    createBeneficiary(data: CreateBeneficiaryDto): Promise<any>;
    /**
     * returns all the beneficiaries linked to business/merchant
     * @param {ListBeneficiaryDto} data - ListBeneficiaryDto - This is the data that will be sent to the API.
     * @returns The response is an array of beneficiary objects
     */
    listBeneficiaries(data: ListBeneficiaryDto): Promise<any>;
    /**
     * It fetches and returns the detail of a single beneficiary
     * @param {FetchDeleteBeneficiaryDto} data - FetchDeleteBeneficiaryDto - the data to be sent to the API
     * @returns The response is a beneficiary object.
     */
    fetchBeneficiary(data: FetchDeleteBeneficiaryDto): Promise<any>;
    /**
     * allows a merchant to update any of this beneficiary details
     * @param {UpdateBeneficiaryDto} data - UpdateBeneficiaryDto - The data object that will be sent to the API.
     * @returns The response from the API
     */
    updateBeneficiary(data: UpdateBeneficiaryDto): Promise<any>;
    /**
     * It allows a merchant to remove any of his beneficiary
     * @param {FetchDeleteBeneficiaryDto} data - FetchDeleteBeneficiaryDto - The data object that will be sent to the API.
     * @returns The response from the API
     */
    deleteBeneficiary(data: FetchDeleteBeneficiaryDto): Promise<any>;
}
